
BackMiePrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800383c  0800383c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800383c  0800383c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800383c  0800383c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0000483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003840  08003840  00004840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003844  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  08003850  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003850  00005248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef2e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d2  00000000  00000000  00013f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00016640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4f  00000000  00000000  000173a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028fc  00000000  00000000  00017def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150bd  00000000  00000000  0001a6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d03  00000000  00000000  0002f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d14ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d0  00000000  00000000  000d14f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000d4ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037ec 	.word	0x080037ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037ec 	.word	0x080037ec

080001c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b18      	ldr	r3, [pc, #96]	@ (800023c <MX_ADC1_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <MX_ADC1_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <MX_ADC1_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <MX_ADC1_Init+0x74>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <MX_ADC1_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	@ (800023c <MX_ADC1_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_ADC1_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <MX_ADC1_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	@ (800023c <MX_ADC1_Init+0x74>)
 8000206:	f000 fccb 	bl	8000ba0 <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000210:	f000 f9e7 	bl	80005e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000214:	2304      	movs	r3, #4
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_ADC1_Init+0x74>)
 8000226:	f000 fd93 	bl	8000d50 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000230:	f000 f9d7 	bl	80005e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000028 	.word	0x20000028
 8000240:	40012400 	.word	0x40012400

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a15      	ldr	r2, [pc, #84]	@ (80002b8 <HAL_ADC_MspInit+0x74>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d124      	bne.n	80002b0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000266:	4b15      	ldr	r3, [pc, #84]	@ (80002bc <HAL_ADC_MspInit+0x78>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a14      	ldr	r2, [pc, #80]	@ (80002bc <HAL_ADC_MspInit+0x78>)
 800026c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <HAL_ADC_MspInit+0x78>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800027a:	613b      	str	r3, [r7, #16]
 800027c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <HAL_ADC_MspInit+0x78>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <HAL_ADC_MspInit+0x78>)
 8000284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <HAL_ADC_MspInit+0x78>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SADJ_Pin|EADJ_Pin|WADJ_Pin|NADJ_Pin;
 8000296:	23f0      	movs	r3, #240	@ 0xf0
 8000298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800029a:	2303      	movs	r3, #3
 800029c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	4619      	mov	r1, r3
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ac:	f000 ff68 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002b0:	bf00      	nop
 80002b2:	3728      	adds	r7, #40	@ 0x28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40012400 	.word	0x40012400
 80002bc:	40021000 	.word	0x40021000

080002c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	@ 0x30
 80002c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 031c 	add.w	r3, r7, #28
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d6:	4b3c      	ldr	r3, [pc, #240]	@ (80003c8 <MX_GPIO_Init+0x108>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a3b      	ldr	r2, [pc, #236]	@ (80003c8 <MX_GPIO_Init+0x108>)
 80002dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b39      	ldr	r3, [pc, #228]	@ (80003c8 <MX_GPIO_Init+0x108>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002ea:	61bb      	str	r3, [r7, #24]
 80002ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ee:	4b36      	ldr	r3, [pc, #216]	@ (80003c8 <MX_GPIO_Init+0x108>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a35      	ldr	r2, [pc, #212]	@ (80003c8 <MX_GPIO_Init+0x108>)
 80002f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b33      	ldr	r3, [pc, #204]	@ (80003c8 <MX_GPIO_Init+0x108>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b30      	ldr	r3, [pc, #192]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2f      	ldr	r2, [pc, #188]	@ (80003c8 <MX_GPIO_Init+0x108>)
 800030c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b2d      	ldr	r3, [pc, #180]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800031a:	613b      	str	r3, [r7, #16]
 800031c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b2a      	ldr	r3, [pc, #168]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a29      	ldr	r2, [pc, #164]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b27      	ldr	r3, [pc, #156]	@ (80003c8 <MX_GPIO_Init+0x108>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000336:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a23      	ldr	r2, [pc, #140]	@ (80003c8 <MX_GPIO_Init+0x108>)
 800033c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b21      	ldr	r3, [pc, #132]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034e:	4b1e      	ldr	r3, [pc, #120]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a1d      	ldr	r2, [pc, #116]	@ (80003c8 <MX_GPIO_Init+0x108>)
 8000354:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <MX_GPIO_Init+0x108>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S1_Pin|S2_Pin|S3_Pin|N1_Pin
 8000366:	2200      	movs	r2, #0
 8000368:	f240 318e 	movw	r1, #910	@ 0x38e
 800036c:	4817      	ldr	r0, [pc, #92]	@ (80003cc <MX_GPIO_Init+0x10c>)
 800036e:	f001 f881 	bl	8001474 <HAL_GPIO_WritePin>
                          |N2_Pin|N3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E1_Pin|E2_Pin|E3_Pin|W1_Pin
 8000372:	2200      	movs	r2, #0
 8000374:	f640 6107 	movw	r1, #3591	@ 0xe07
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f001 f87a 	bl	8001474 <HAL_GPIO_WritePin>
                          |W2_Pin|W3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin N1_Pin
                           N2_Pin N3_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|N1_Pin
 8000380:	f240 338e 	movw	r3, #910	@ 0x38e
 8000384:	61fb      	str	r3, [r7, #28]
                          |N2_Pin|N3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000392:	f107 031c 	add.w	r3, r7, #28
 8000396:	4619      	mov	r1, r3
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <MX_GPIO_Init+0x10c>)
 800039a:	f000 fef1 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : E1_Pin E2_Pin E3_Pin W1_Pin
                           W2_Pin W3_Pin */
  GPIO_InitStruct.Pin = E1_Pin|E2_Pin|E3_Pin|W1_Pin
 800039e:	f640 6307 	movw	r3, #3591	@ 0xe07
 80003a2:	61fb      	str	r3, [r7, #28]
                          |W2_Pin|W3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	2300      	movs	r3, #0
 80003ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b0:	f107 031c 	add.w	r3, r7, #28
 80003b4:	4619      	mov	r1, r3
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ba:	f000 fee1 	bl	8001180 <HAL_GPIO_Init>

}
 80003be:	bf00      	nop
 80003c0:	3730      	adds	r7, #48	@ 0x30
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800

080003d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <MX_I2C1_Init+0x74>)
 80003d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000448 <MX_I2C1_Init+0x78>)
 80003d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003da:	4b1a      	ldr	r3, [pc, #104]	@ (8000444 <MX_I2C1_Init+0x74>)
 80003dc:	4a1b      	ldr	r2, [pc, #108]	@ (800044c <MX_I2C1_Init+0x7c>)
 80003de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003e0:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <MX_I2C1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e6:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <MX_I2C1_Init+0x74>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ec:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003f2:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_I2C1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <MX_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fe:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_I2C1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800040a:	480e      	ldr	r0, [pc, #56]	@ (8000444 <MX_I2C1_Init+0x74>)
 800040c:	f001 f84a 	bl	80014a4 <HAL_I2C_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000416:	f000 f8e4 	bl	80005e2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800041a:	2100      	movs	r1, #0
 800041c:	4809      	ldr	r0, [pc, #36]	@ (8000444 <MX_I2C1_Init+0x74>)
 800041e:	f001 f8dc 	bl	80015da <HAL_I2CEx_ConfigAnalogFilter>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000428:	f000 f8db 	bl	80005e2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800042c:	2100      	movs	r1, #0
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_I2C1_Init+0x74>)
 8000430:	f001 f91e 	bl	8001670 <HAL_I2CEx_ConfigDigitalFilter>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800043a:	f000 f8d2 	bl	80005e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000058 	.word	0x20000058
 8000448:	40005400 	.word	0x40005400
 800044c:	00201d2b 	.word	0x00201d2b

08000450 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08a      	sub	sp, #40	@ 0x28
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a17      	ldr	r2, [pc, #92]	@ (80004cc <HAL_I2C_MspInit+0x7c>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d128      	bne.n	80004c4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <HAL_I2C_MspInit+0x80>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a16      	ldr	r2, [pc, #88]	@ (80004d0 <HAL_I2C_MspInit+0x80>)
 8000478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <HAL_I2C_MspInit+0x80>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800048a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800048e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000490:	2312      	movs	r3, #18
 8000492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000498:	2303      	movs	r3, #3
 800049a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800049c:	2304      	movs	r3, #4
 800049e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4619      	mov	r1, r3
 80004a6:	480b      	ldr	r0, [pc, #44]	@ (80004d4 <HAL_I2C_MspInit+0x84>)
 80004a8:	f000 fe6a 	bl	8001180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <HAL_I2C_MspInit+0x80>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4a07      	ldr	r2, [pc, #28]	@ (80004d0 <HAL_I2C_MspInit+0x80>)
 80004b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004b6:	61d3      	str	r3, [r2, #28]
 80004b8:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <HAL_I2C_MspInit+0x80>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004c4:	bf00      	nop
 80004c6:	3728      	adds	r7, #40	@ 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40005400 	.word	0x40005400
 80004d0:	40021000 	.word	0x40021000
 80004d4:	48000400 	.word	0x48000400

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fad6 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f810 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f7ff feec 	bl	80002c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f9ca 	bl	8000880 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f9f8 	bl	80008e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f0:	f7ff ff6e 	bl	80003d0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80004f4:	f7ff fe68 	bl	80001c8 <MX_ADC1_Init>
  MX_SDADC1_Init();
 80004f8:	f000 f87a 	bl	80005f0 <MX_SDADC1_Init>
  MX_SDADC3_Init();
 80004fc:	f000 f898 	bl	8000630 <MX_SDADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <main+0x28>

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b09a      	sub	sp, #104	@ 0x68
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800050e:	2228      	movs	r2, #40	@ 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 f93d 	bl	8003792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	222c      	movs	r2, #44	@ 0x2c
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 f92f 	bl	8003792 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000534:	2303      	movs	r3, #3
 8000536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800053c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000546:	2310      	movs	r3, #16
 8000548:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000552:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000554:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000558:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f912 	bl	8001788 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800056a:	f000 f83a 	bl	80005e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800057e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f002 f90a 	bl	80027a4 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 f824 	bl	80005e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800059a:	f640 03a3 	movw	r3, #2211	@ 0x8a3
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80005a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV12;
 80005ae:	f04f 4328 	mov.w	r3, #2818572288	@ 0xa8000000
 80005b2:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fb04 	bl	8002bc8 <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005c6:	f000 f80c 	bl	80005e2 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 80005ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ce:	f001 f8bb 	bl	8001748 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 80005d2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80005d6:	f001 f8b7 	bl	8001748 <HAL_PWREx_EnableSDADC>
}
 80005da:	bf00      	nop
 80005dc:	3768      	adds	r7, #104	@ 0x68
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e6:	b672      	cpsid	i
}
 80005e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <Error_Handler+0x8>
	...

080005f0 <MX_SDADC1_Init>:
SDADC_HandleTypeDef hsdadc1;
SDADC_HandleTypeDef hsdadc3;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <MX_SDADC1_Init+0x38>)
 80005f6:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <MX_SDADC1_Init+0x3c>)
 80005f8:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <MX_SDADC1_Init+0x38>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <MX_SDADC1_Init+0x38>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <MX_SDADC1_Init+0x38>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_SDADC1_Init+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_SDADC1_Init+0x38>)
 8000614:	f002 fc4a 	bl	8002eac <HAL_SDADC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SDADC1_Init+0x32>
  {
    Error_Handler();
 800061e:	f7ff ffe0 	bl	80005e2 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000ac 	.word	0x200000ac
 800062c:	40016000 	.word	0x40016000

08000630 <MX_SDADC3_Init>:
/* SDADC3 init function */
void MX_SDADC3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END SDADC3_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_SDADC3_Init+0x38>)
 8000636:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <MX_SDADC3_Init+0x3c>)
 8000638:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_SDADC3_Init+0x38>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_SDADC3_Init+0x38>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_SDADC3_Init+0x38>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_SDADC3_Init+0x38>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_SDADC3_Init+0x38>)
 8000654:	f002 fc2a 	bl	8002eac <HAL_SDADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_SDADC3_Init+0x32>
  {
    Error_Handler();
 800065e:	f7ff ffc0 	bl	80005e2 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

  /* USER CODE END SDADC3_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000f0 	.word	0x200000f0
 800066c:	40016800 	.word	0x40016800

08000670 <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	@ 0x38
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a43      	ldr	r2, [pc, #268]	@ (800079c <HAL_SDADC_MspInit+0x12c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d13d      	bne.n	800070e <HAL_SDADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8000692:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a42      	ldr	r2, [pc, #264]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 8000698:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b3d      	ldr	r3, [pc, #244]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a3c      	ldr	r2, [pc, #240]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 80006b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b3a      	ldr	r3, [pc, #232]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c2:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a36      	ldr	r2, [pc, #216]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b34      	ldr	r3, [pc, #208]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
    PB1     ------> SDADC1_AIN5P
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN7P
    */
    GPIO_InitStruct.Pin = SADA_Pin|SADB_Pin|EADA_Pin;
 80006da:	2307      	movs	r3, #7
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ea:	4619      	mov	r1, r3
 80006ec:	482d      	ldr	r0, [pc, #180]	@ (80007a4 <HAL_SDADC_MspInit+0x134>)
 80006ee:	f000 fd47 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EADB_Pin|NADA_Pin;
 80006f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000704:	4619      	mov	r1, r3
 8000706:	4828      	ldr	r0, [pc, #160]	@ (80007a8 <HAL_SDADC_MspInit+0x138>)
 8000708:	f000 fd3a 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }
}
 800070c:	e042      	b.n	8000794 <HAL_SDADC_MspInit+0x124>
  else if(sdadcHandle->Instance==SDADC3)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a26      	ldr	r2, [pc, #152]	@ (80007ac <HAL_SDADC_MspInit+0x13c>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d13d      	bne.n	8000794 <HAL_SDADC_MspInit+0x124>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a20      	ldr	r2, [pc, #128]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 800071e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a1a      	ldr	r2, [pc, #104]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 8000736:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800073a:	6153      	str	r3, [r2, #20]
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 800074e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000752:	6153      	str	r3, [r2, #20]
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_SDADC_MspInit+0x130>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NADB_Pin|WADB_Pin;
 8000760:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000766:	2303      	movs	r3, #3
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <HAL_SDADC_MspInit+0x134>)
 8000776:	f000 fd03 	bl	8001180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WADA_Pin;
 800077a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000780:	2303      	movs	r3, #3
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(WADA_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <HAL_SDADC_MspInit+0x140>)
 8000790:	f000 fcf6 	bl	8001180 <HAL_GPIO_Init>
}
 8000794:	bf00      	nop
 8000796:	3738      	adds	r7, #56	@ 0x38
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40016000 	.word	0x40016000
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400
 80007a8:	48001000 	.word	0x48001000
 80007ac:	40016800 	.word	0x40016800
 80007b0:	48000c00 	.word	0x48000c00

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x44>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	61d3      	str	r3, [r2, #28]
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x44>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x4>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f961 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <SystemInit+0x20>)
 8000862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <SystemInit+0x20>)
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800086c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <MX_USART1_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USART1_UART_Init+0x58>)
 80008c4:	f002 fb82 	bl	8002fcc <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f7ff fe88 	bl	80005e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000134 	.word	0x20000134
 80008dc:	40013800 	.word	0x40013800

080008e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	@ (800093c <MX_USART2_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART2_UART_Init+0x58>)
 8000924:	f002 fb52 	bl	8002fcc <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f7ff fe58 	bl	80005e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001bc 	.word	0x200001bc
 800093c:	40004400 	.word	0x40004400

08000940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a32      	ldr	r2, [pc, #200]	@ (8000a28 <HAL_UART_MspInit+0xe8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d130      	bne.n	80009c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000962:	4b32      	ldr	r3, [pc, #200]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a31      	ldr	r2, [pc, #196]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 8000980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000992:	23c0      	movs	r3, #192	@ 0xc0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009a2:	2307      	movs	r3, #7
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4820      	ldr	r0, [pc, #128]	@ (8000a30 <HAL_UART_MspInit+0xf0>)
 80009ae:	f000 fbe7 	bl	8001180 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80009b2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80009b6:	f000 fea7 	bl	8001708 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80009ba:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80009be:	f000 fea3 	bl	8001708 <HAL_I2CEx_EnableFastModePlus>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009c2:	e02c      	b.n	8000a1e <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <HAL_UART_MspInit+0xf4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d127      	bne.n	8000a1e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a10      	ldr	r2, [pc, #64]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_UART_MspInit+0xec>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80009fe:	2318      	movs	r3, #24
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_UART_MspInit+0xf0>)
 8000a1a:	f000 fbb1 	bl	8001180 <HAL_GPIO_Init>
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	@ 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000400 	.word	0x48000400
 8000a34:	40004400 	.word	0x40004400

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a70 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff ff0e 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 fe9d 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fd35 	bl	80004d8 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a7c:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 8000a80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a84:	20000248 	.word	0x20000248

08000a88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 fb3b 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe84 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fb45 	bl	8001166 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 fb1b 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000244 	.word	0x20000244

08000b40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000244 	.word	0x20000244

08000b58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e0be      	b.n	8000d40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fb30 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f9a3 	bl	8000f30 <ADC_ConversionStop_Disable>
 8000bea:	4603      	mov	r3, r0
 8000bec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8099 	bne.w	8000d2e <HAL_ADC_Init+0x18e>
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 8095 	bne.w	8000d2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c0c:	f023 0302 	bic.w	r3, r3, #2
 8000c10:	f043 0202 	orr.w	r2, r3, #2
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000c20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b1b      	ldrb	r3, [r3, #12]
 8000c26:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8000c28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c38:	d003      	beq.n	8000c42 <HAL_ADC_Init+0xa2>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d102      	bne.n	8000c48 <HAL_ADC_Init+0xa8>
 8000c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c46:	e000      	b.n	8000c4a <HAL_ADC_Init+0xaa>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7d1b      	ldrb	r3, [r3, #20]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d119      	bne.n	8000c8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7b1b      	ldrb	r3, [r3, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d109      	bne.n	8000c74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	e00b      	b.n	8000c8c <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c78:	f043 0220 	orr.w	r2, r3, #32
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c84:	f043 0201 	orr.w	r2, r3, #1
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <HAL_ADC_Init+0x1a8>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cbc:	d003      	beq.n	8000cc6 <HAL_ADC_Init+0x126>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d104      	bne.n	8000cd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	051b      	lsls	r3, r3, #20
 8000cce:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_ADC_Init+0x1ac>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d10b      	bne.n	8000d0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfe:	f023 0303 	bic.w	r3, r3, #3
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d0a:	e018      	b.n	8000d3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d10:	f023 0312 	bic.w	r3, r3, #18
 8000d14:	f043 0210 	orr.w	r2, r3, #16
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d20:	f043 0201 	orr.w	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d2c:	e007      	b.n	8000d3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d32:	f043 0210 	orr.w	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	ffe1f7fd 	.word	0xffe1f7fd
 8000d4c:	ff1f0efe 	.word	0xff1f0efe

08000d50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d101      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x20>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e0d2      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x1c6>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	d81c      	bhi.n	8000dba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	3b05      	subs	r3, #5
 8000d92:	221f      	movs	r2, #31
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4019      	ands	r1, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	3b05      	subs	r3, #5
 8000dac:	fa00 f203 	lsl.w	r2, r0, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db8:	e03c      	b.n	8000e34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d81c      	bhi.n	8000dfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3b23      	subs	r3, #35	@ 0x23
 8000dd4:	221f      	movs	r2, #31
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4019      	ands	r1, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	3b23      	subs	r3, #35	@ 0x23
 8000dee:	fa00 f203 	lsl.w	r2, r0, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dfa:	e01b      	b.n	8000e34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3b41      	subs	r3, #65	@ 0x41
 8000e0e:	221f      	movs	r2, #31
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4019      	ands	r1, r3
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	3b41      	subs	r3, #65	@ 0x41
 8000e28:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d91c      	bls.n	8000e76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68d9      	ldr	r1, [r3, #12]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b1e      	subs	r3, #30
 8000e4e:	2207      	movs	r2, #7
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4019      	ands	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6898      	ldr	r0, [r3, #8]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	3b1e      	subs	r3, #30
 8000e68:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	e019      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6919      	ldr	r1, [r3, #16]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	2207      	movs	r2, #7
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4019      	ands	r1, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	6898      	ldr	r0, [r3, #8]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b10      	cmp	r3, #16
 8000eb0:	d003      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eb6:	2b11      	cmp	r3, #17
 8000eb8:	d11e      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ec8:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d11c      	bne.n	8000f0c <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <HAL_ADC_ConfigChannel+0x1d4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <HAL_ADC_ConfigChannel+0x1d8>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	0c9a      	lsrs	r2, r3, #18
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8000ee8:	e002      	b.n	8000ef0 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f9      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ef6:	e009      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b12      	cmp	r3, #18
 8000efe:	d105      	bne.n	8000f0c <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <HAL_ADC_ConfigChannel+0x1dc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a09      	ldr	r2, [pc, #36]	@ (8000f2c <HAL_ADC_ConfigChannel+0x1dc>)
 8000f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f0a:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000
 8000f28:	431bde83 	.word	0x431bde83
 8000f2c:	40010000 	.word	0x40010000

08000f30 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d12e      	bne.n	8000fa8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f5a:	f7ff fdf1 	bl	8000b40 <HAL_GetTick>
 8000f5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f60:	e01b      	b.n	8000f9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f62:	f7ff fded 	bl	8000b40 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d914      	bls.n	8000f9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10d      	bne.n	8000f9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f82:	f043 0210 	orr.w	r2, r3, #16
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e007      	b.n	8000faa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d0dc      	beq.n	8000f62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	@ (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	@ (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	e154      	b.n	800143a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8146 	beq.w	8001434 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d005      	beq.n	80011c0 <HAL_GPIO_Init+0x40>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d130      	bne.n	8001222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f003 0201 	and.w	r2, r3, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b03      	cmp	r3, #3
 800122c:	d017      	beq.n	800125e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d123      	bne.n	80012b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0203 	and.w	r2, r3, #3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80a0 	beq.w	8001434 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4b58      	ldr	r3, [pc, #352]	@ (8001458 <HAL_GPIO_Init+0x2d8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a57      	ldr	r2, [pc, #348]	@ (8001458 <HAL_GPIO_Init+0x2d8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b55      	ldr	r3, [pc, #340]	@ (8001458 <HAL_GPIO_Init+0x2d8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130c:	4a53      	ldr	r2, [pc, #332]	@ (800145c <HAL_GPIO_Init+0x2dc>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001336:	d019      	beq.n	800136c <HAL_GPIO_Init+0x1ec>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a49      	ldr	r2, [pc, #292]	@ (8001460 <HAL_GPIO_Init+0x2e0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d013      	beq.n	8001368 <HAL_GPIO_Init+0x1e8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a48      	ldr	r2, [pc, #288]	@ (8001464 <HAL_GPIO_Init+0x2e4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00d      	beq.n	8001364 <HAL_GPIO_Init+0x1e4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a47      	ldr	r2, [pc, #284]	@ (8001468 <HAL_GPIO_Init+0x2e8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0x1e0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a46      	ldr	r2, [pc, #280]	@ (800146c <HAL_GPIO_Init+0x2ec>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <HAL_GPIO_Init+0x1dc>
 8001358:	2304      	movs	r3, #4
 800135a:	e008      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 800135c:	2305      	movs	r3, #5
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001360:	2303      	movs	r3, #3
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001364:	2302      	movs	r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 800136c:	2300      	movs	r3, #0
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137e:	4937      	ldr	r1, [pc, #220]	@ (800145c <HAL_GPIO_Init+0x2dc>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138c:	4b38      	ldr	r3, [pc, #224]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013da:	4a25      	ldr	r2, [pc, #148]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001404:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800142e:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	f47f aea3 	bne.w	8001190 <HAL_GPIO_Init+0x10>
  }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	48000400 	.word	0x48000400
 8001464:	48000800 	.word	0x48000800
 8001468:	48000c00 	.word	0x48000c00
 800146c:	48001000 	.word	0x48001000
 8001470:	40010400 	.word	0x40010400

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001490:	e002      	b.n	8001498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e08d      	b.n	80015d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe ffc0 	bl	8000450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2224      	movs	r2, #36	@ 0x24
 80014d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e006      	b.n	800152c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800152a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d108      	bne.n	8001546 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	e007      	b.n	8001556 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001554:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001564:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69d9      	ldr	r1, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	d138      	bne.n	8001662 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e032      	b.n	8001664 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2224      	movs	r2, #36	@ 0x24
 800160a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800162c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001662:	2302      	movs	r3, #2
  }
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b20      	cmp	r3, #32
 8001684:	d139      	bne.n	80016fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001690:	2302      	movs	r3, #2
 8001692:	e033      	b.n	80016fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2224      	movs	r2, #36	@ 0x24
 80016a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0201 	orr.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016fa:	2302      	movs	r3, #2
  }
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4905      	ldr	r1, [pc, #20]	@ (8001744 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_PWREx_EnableSDADC+0x38>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_PWREx_EnableSDADC+0x38>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_PWREx_EnableSDADC+0x38>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_PWREx_EnableSDADC+0x3c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4905      	ldr	r1, [pc, #20]	@ (8001784 <HAL_PWREx_EnableSDADC+0x3c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40021000 	.word	0x40021000
 8001784:	40007000 	.word	0x40007000

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800178e:	af00      	add	r7, sp, #0
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001798:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f000 bff4 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 816d 	beq.w	8001a9e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017c4:	4bb4      	ldr	r3, [pc, #720]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d157      	bne.n	800188c <HAL_RCC_OscConfig+0x104>
 80017dc:	4bae      	ldr	r3, [pc, #696]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e8:	d150      	bne.n	800188c <HAL_RCC_OscConfig+0x104>
 80017ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	fab3 f383 	clz	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b3f      	cmp	r3, #63	@ 0x3f
 800180a:	d802      	bhi.n	8001812 <HAL_RCC_OscConfig+0x8a>
 800180c:	4ba2      	ldr	r3, [pc, #648]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e015      	b.n	800183e <HAL_RCC_OscConfig+0xb6>
 8001812:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001816:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001826:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800182a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800182e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800183a:	4b97      	ldr	r3, [pc, #604]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001842:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001846:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800184a:	fa92 f2a2 	rbit	r2, r2
 800184e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001852:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001856:	fab2 f282 	clz	r2, r2
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	f002 021f 	and.w	r2, r2, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8114 	beq.w	8001a9c <HAL_RCC_OscConfig+0x314>
 8001874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 810b 	bne.w	8001a9c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f000 bf85 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001890:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x124>
 800189e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e036      	b.n	800191a <HAL_RCC_OscConfig+0x192>
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x14e>
 80018bc:	4b76      	ldr	r3, [pc, #472]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a75      	ldr	r2, [pc, #468]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b73      	ldr	r3, [pc, #460]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a72      	ldr	r2, [pc, #456]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e021      	b.n	800191a <HAL_RCC_OscConfig+0x192>
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x17a>
 80018e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a67      	ldr	r2, [pc, #412]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e00b      	b.n	800191a <HAL_RCC_OscConfig+0x192>
 8001902:	4b65      	ldr	r3, [pc, #404]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a64      	ldr	r2, [pc, #400]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b62      	ldr	r3, [pc, #392]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a61      	ldr	r2, [pc, #388]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001918:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800191a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191e:	f023 020f 	bic.w	r2, r3, #15
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	495a      	ldr	r1, [pc, #360]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001930:	4313      	orrs	r3, r2
 8001932:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d054      	beq.n	80019ee <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f8fc 	bl	8000b40 <HAL_GetTick>
 8001948:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194e:	f7ff f8f7 	bl	8000b40 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	@ 0x64
 800195c:	d902      	bls.n	8001964 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	f000 bf19 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
 8001964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001968:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001978:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b3f      	cmp	r3, #63	@ 0x3f
 8001984:	d802      	bhi.n	800198c <HAL_RCC_OscConfig+0x204>
 8001986:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	e015      	b.n	80019b8 <HAL_RCC_OscConfig+0x230>
 800198c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001990:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80019a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80019a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80019b4:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019bc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80019c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80019c4:	fa92 f2a2 	rbit	r2, r2
 80019c8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80019cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f002 021f 	and.w	r2, r2, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0b0      	beq.n	800194e <HAL_RCC_OscConfig+0x1c6>
 80019ec:	e057      	b.n	8001a9e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff f8a7 	bl	8000b40 <HAL_GetTick>
 80019f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f8a2 	bl	8000b40 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b64      	cmp	r3, #100	@ 0x64
 8001a06:	d902      	bls.n	8001a0e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	f000 bec4 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
 8001a0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a12:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001a22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a2e:	d802      	bhi.n	8001a36 <HAL_RCC_OscConfig+0x2ae>
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x2da>
 8001a36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a3a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a4e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a52:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <HAL_RCC_OscConfig+0x310>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a66:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a6e:	fa92 f2a2 	rbit	r2, r2
 8001a72:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a76:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a7a:	fab2 f282 	clz	r2, r2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	f002 021f 	and.w	r2, r2, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1b0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x270>
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_OscConfig+0x316>
 8001a98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 816c 	beq.w	8001d8c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ab4:	4bcc      	ldr	r3, [pc, #816]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ac0:	4bc9      	ldr	r3, [pc, #804]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d16d      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x420>
 8001acc:	4bc6      	ldr	r3, [pc, #792]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d167      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x420>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001aea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001af6:	d802      	bhi.n	8001afe <HAL_RCC_OscConfig+0x376>
 8001af8:	4bbb      	ldr	r3, [pc, #748]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e013      	b.n	8001b26 <HAL_RCC_OscConfig+0x39e>
 8001afe:	2302      	movs	r3, #2
 8001b00:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b10:	2302      	movs	r3, #2
 8001b12:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b16:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b22:	4bb1      	ldr	r3, [pc, #708]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	2202      	movs	r2, #2
 8001b28:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001b2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001b30:	fa92 f2a2 	rbit	r2, r2
 8001b34:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001b38:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b3c:	fab2 f282 	clz	r2, r2
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f042 0220 	orr.w	r2, r2, #32
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f002 021f 	and.w	r2, r2, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00a      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3e6>
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d002      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f000 be14 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	21f8      	movs	r1, #248	@ 0xf8
 8001b84:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b8c:	fa91 f1a1 	rbit	r1, r1
 8001b90:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b94:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b98:	fab1 f181 	clz	r1, r1
 8001b9c:	b2c9      	uxtb	r1, r1
 8001b9e:	408b      	lsls	r3, r1
 8001ba0:	4991      	ldr	r1, [pc, #580]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	e0f1      	b.n	8001d8c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8083 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x538>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001bcc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2301      	movs	r3, #1
 8001be4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe ffab 	bl	8000b40 <HAL_GetTick>
 8001bea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7fe ffa6 	bl	8000b40 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d902      	bls.n	8001c06 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f000 bdc8 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001c18:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c24:	d802      	bhi.n	8001c2c <HAL_RCC_OscConfig+0x4a4>
 8001c26:	4b70      	ldr	r3, [pc, #448]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e013      	b.n	8001c54 <HAL_RCC_OscConfig+0x4cc>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c3e:	2302      	movs	r3, #2
 8001c40:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c44:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c50:	4b65      	ldr	r3, [pc, #404]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	2202      	movs	r2, #2
 8001c56:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c5e:	fa92 f2a2 	rbit	r2, r2
 8001c62:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c66:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f002 021f 	and.w	r2, r2, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0b4      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b58      	ldr	r3, [pc, #352]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	21f8      	movs	r1, #248	@ 0xf8
 8001c9c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ca4:	fa91 f1a1 	rbit	r1, r1
 8001ca8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001cac:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001cb0:	fab1 f181 	clz	r1, r1
 8001cb4:	b2c9      	uxtb	r1, r1
 8001cb6:	408b      	lsls	r3, r1
 8001cb8:	494b      	ldr	r1, [pc, #300]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
 8001cbe:	e065      	b.n	8001d8c <HAL_RCC_OscConfig+0x604>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ce0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff28 	bl	8000b40 <HAL_GetTick>
 8001cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7fe ff23 	bl	8000b40 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d902      	bls.n	8001d0c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	f000 bd45 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d2a:	d802      	bhi.n	8001d32 <HAL_RCC_OscConfig+0x5aa>
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e013      	b.n	8001d5a <HAL_RCC_OscConfig+0x5d2>
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d56:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <HAL_RCC_OscConfig+0x660>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d60:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d64:	fa92 f2a2 	rbit	r2, r2
 8001d68:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f042 0220 	orr.w	r2, r2, #32
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f002 021f 	and.w	r2, r2, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1b4      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8115 	beq.w	8001fcc <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x728>
 8001db2:	2301      	movs	r3, #1
 8001db4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_RCC_OscConfig+0x664>)
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe feb0 	bl	8000b40 <HAL_GetTick>
 8001de0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de4:	e00f      	b.n	8001e06 <HAL_RCC_OscConfig+0x67e>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df0:	f7fe fea6 	bl	8000b40 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d902      	bls.n	8001e06 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	f000 bcc8 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e28:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e44:	2202      	movs	r2, #2
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e60:	4bb0      	ldr	r3, [pc, #704]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8001e62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	6019      	str	r1, [r3, #0]
 8001e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f1a3 	rbit	r1, r3
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e86:	6019      	str	r1, [r3, #0]
  return result;
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0a0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x668>
 8001eae:	e08d      	b.n	8001fcc <HAL_RCC_OscConfig+0x844>
 8001eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ed2:	601a      	str	r2, [r3, #0]
  return result;
 8001ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001edc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b90      	ldr	r3, [pc, #576]	@ (8002128 <HAL_RCC_OscConfig+0x9a0>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	461a      	mov	r2, r3
 8001eee:	2300      	movs	r3, #0
 8001ef0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fe25 	bl	8000b40 <HAL_GetTick>
 8001ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efc:	f7fe fe20 	bl	8000b40 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d902      	bls.n	8001f12 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	f000 bc42 	b.w	8002796 <HAL_RCC_OscConfig+0x100e>
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f3e:	2202      	movs	r2, #2
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f62:	2202      	movs	r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f2a3 	rbit	r2, r3
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7e:	4b69      	ldr	r3, [pc, #420]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8001f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f86:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	6019      	str	r1, [r3, #0]
 8001f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f1a3 	rbit	r1, r3
 8001f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fa4:	6019      	str	r1, [r3, #0]
  return result;
 8001fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001faa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d197      	bne.n	8001efc <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 819e 	beq.w	800231e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d116      	bne.n	8002022 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	61d3      	str	r3, [r2, #28]
 8002000:	4b48      	ldr	r3, [pc, #288]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800201a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800201c:	2301      	movs	r3, #1
 800201e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002022:	4b42      	ldr	r3, [pc, #264]	@ (800212c <HAL_RCC_OscConfig+0x9a4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11a      	bne.n	8002064 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202e:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <HAL_RCC_OscConfig+0x9a4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a3e      	ldr	r2, [pc, #248]	@ (800212c <HAL_RCC_OscConfig+0x9a4>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002038:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7fe fd81 	bl	8000b40 <HAL_GetTick>
 800203e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002044:	f7fe fd7c 	bl	8000b40 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b64      	cmp	r3, #100	@ 0x64
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e39e      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b34      	ldr	r3, [pc, #208]	@ (800212c <HAL_RCC_OscConfig+0x9a4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ef      	beq.n	8002044 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x8fa>
 8002074:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a2a      	ldr	r2, [pc, #168]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e035      	b.n	80020ee <HAL_RCC_OscConfig+0x966>
 8002082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002086:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x924>
 8002092:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a23      	ldr	r2, [pc, #140]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a20      	ldr	r2, [pc, #128]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	e020      	b.n	80020ee <HAL_RCC_OscConfig+0x966>
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x94e>
 80020bc:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a18      	ldr	r2, [pc, #96]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a15      	ldr	r2, [pc, #84]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0x966>
 80020d6:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <HAL_RCC_OscConfig+0x99c>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe fd1e 	bl	8000b40 <HAL_GetTick>
 8002104:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e012      	b.n	8002130 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fd19 	bl	8000b40 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d908      	bls.n	8002130 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e339      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	10908120 	.word	0x10908120
 800212c:	40007000 	.word	0x40007000
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002140:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800215c:	2202      	movs	r2, #2
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002172:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002176:	601a      	str	r2, [r3, #0]
  return result;
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002180:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_RCC_OscConfig+0xa10>
 8002192:	4b98      	ldr	r3, [pc, #608]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	e013      	b.n	80021c0 <HAL_RCC_OscConfig+0xa38>
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	4b8d      	ldr	r3, [pc, #564]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021c8:	2102      	movs	r1, #2
 80021ca:	6011      	str	r1, [r2, #0]
 80021cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021d0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	fa92 f1a2 	rbit	r1, r2
 80021da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021de:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021e2:	6011      	str	r1, [r2, #0]
  return result;
 80021e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021e8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	fab2 f282 	clz	r2, r2
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f002 021f 	and.w	r2, r2, #31
 80021fe:	2101      	movs	r1, #1
 8002200:	fa01 f202 	lsl.w	r2, r1, r2
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	f43f af7f 	beq.w	800210a <HAL_RCC_OscConfig+0x982>
 800220c:	e07d      	b.n	800230a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe fc97 	bl	8000b40 <HAL_GetTick>
 8002212:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe fc92 	bl	8000b40 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e2b2      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002238:	2202      	movs	r2, #2
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002240:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800225c:	2202      	movs	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002276:	601a      	str	r2, [r3, #0]
  return result;
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002280:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_RCC_OscConfig+0xb10>
 8002292:	4b58      	ldr	r3, [pc, #352]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0xb38>
 8002298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022a0:	2202      	movs	r2, #2
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f2a3 	rbit	r2, r3
 80022b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022c8:	2102      	movs	r1, #2
 80022ca:	6011      	str	r1, [r2, #0]
 80022cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022d0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	fa92 f1a2 	rbit	r1, r2
 80022da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022de:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022e2:	6011      	str	r1, [r2, #0]
  return result;
 80022e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022e8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	fab2 f282 	clz	r2, r2
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	f002 021f 	and.w	r2, r2, #31
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d186      	bne.n	8002218 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800230a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b38      	ldr	r3, [pc, #224]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a37      	ldr	r2, [pc, #220]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8232 	beq.w	8002794 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002330:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	f000 8201 	beq.w	8002740 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b02      	cmp	r3, #2
 800234c:	f040 8157 	bne.w	80025fe <HAL_RCC_OscConfig+0xe76>
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800235c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002374:	601a      	str	r2, [r3, #0]
  return result;
 8002376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800237e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800238a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	461a      	mov	r2, r3
 8002392:	2300      	movs	r3, #0
 8002394:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fbd3 	bl	8000b40 <HAL_GetTick>
 800239a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	e009      	b.n	80023b4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fbce 	bl	8000b40 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1f0      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023d8:	601a      	str	r2, [r3, #0]
  return result;
 80023da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ec:	d804      	bhi.n	80023f8 <HAL_RCC_OscConfig+0xc70>
 80023ee:	4b01      	ldr	r3, [pc, #4]	@ (80023f4 <HAL_RCC_OscConfig+0xc6c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e029      	b.n	8002448 <HAL_RCC_OscConfig+0xcc0>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002430:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	4bc3      	ldr	r3, [pc, #780]	@ (8002754 <HAL_RCC_OscConfig+0xfcc>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002450:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002454:	6011      	str	r1, [r2, #0]
 8002456:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002468:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800246c:	6011      	str	r1, [r2, #0]
  return result;
 800246e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002472:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f002 021f 	and.w	r2, r2, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d185      	bne.n	80023a0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	4baf      	ldr	r3, [pc, #700]	@ (8002754 <HAL_RCC_OscConfig+0xfcc>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	49a7      	ldr	r1, [pc, #668]	@ (8002754 <HAL_RCC_OscConfig+0xfcc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024e0:	601a      	str	r2, [r3, #0]
  return result;
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024ea:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	2301      	movs	r3, #1
 8002500:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fb1d 	bl	8000b40 <HAL_GetTick>
 8002506:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250a:	e009      	b.n	8002520 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fb18 	bl	8000b40 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e13a      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
 8002520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002524:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002528:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800252c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002544:	601a      	str	r2, [r3, #0]
  return result;
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800254e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b3f      	cmp	r3, #63	@ 0x3f
 8002558:	d802      	bhi.n	8002560 <HAL_RCC_OscConfig+0xdd8>
 800255a:	4b7e      	ldr	r3, [pc, #504]	@ (8002754 <HAL_RCC_OscConfig+0xfcc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e027      	b.n	80025b0 <HAL_RCC_OscConfig+0xe28>
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002568:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800258e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002598:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	4b69      	ldr	r3, [pc, #420]	@ (8002754 <HAL_RCC_OscConfig+0xfcc>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	fa92 f1a2 	rbit	r1, r2
 80025cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025d0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025d4:	6011      	str	r1, [r2, #0]
  return result;
 80025d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025da:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d087      	beq.n	800250c <HAL_RCC_OscConfig+0xd84>
 80025fc:	e0ca      	b.n	8002794 <HAL_RCC_OscConfig+0x100c>
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002606:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800260a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002622:	601a      	str	r2, [r3, #0]
  return result;
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800262c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002638:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	461a      	mov	r2, r3
 8002640:	2300      	movs	r3, #0
 8002642:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fa7c 	bl	8000b40 <HAL_GetTick>
 8002648:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	e009      	b.n	8002662 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fa77 	bl	8000b40 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e099      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800266a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800266e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	fa93 f2a3 	rbit	r2, r3
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002686:	601a      	str	r2, [r3, #0]
  return result;
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002690:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b3f      	cmp	r3, #63	@ 0x3f
 800269a:	d802      	bhi.n	80026a2 <HAL_RCC_OscConfig+0xf1a>
 800269c:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <HAL_RCC_OscConfig+0xfcc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	e027      	b.n	80026f2 <HAL_RCC_OscConfig+0xf6a>
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fa93 f2a3 	rbit	r2, r3
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <HAL_RCC_OscConfig+0xfcc>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026fe:	6011      	str	r1, [r2, #0]
 8002700:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002704:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	fa92 f1a2 	rbit	r1, r2
 800270e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002712:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002716:	6011      	str	r1, [r2, #0]
  return result;
 8002718:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	fab2 f282 	clz	r2, r2
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f042 0220 	orr.w	r2, r2, #32
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f002 021f 	and.w	r2, r2, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f202 	lsl.w	r2, r1, r2
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d187      	bne.n	800264e <HAL_RCC_OscConfig+0xec6>
 800273e:	e029      	b.n	8002794 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d103      	bne.n	8002758 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e020      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
 8002754:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <HAL_RCC_OscConfig+0x1018>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002760:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002764:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	429a      	cmp	r2, r3
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002778:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800277c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b09e      	sub	sp, #120	@ 0x78
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e154      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b89      	ldr	r3, [pc, #548]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b86      	ldr	r3, [pc, #536]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4984      	ldr	r1, [pc, #528]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b82      	ldr	r3, [pc, #520]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e13c      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b7b      	ldr	r3, [pc, #492]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4978      	ldr	r1, [pc, #480]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80cd 	beq.w	80029b2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d137      	bne.n	8002890 <HAL_RCC_ClockConfig+0xec>
 8002820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002824:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800282e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b3f      	cmp	r3, #63	@ 0x3f
 8002838:	d802      	bhi.n	8002840 <HAL_RCC_ClockConfig+0x9c>
 800283a:	4b6b      	ldr	r3, [pc, #428]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_RCC_ClockConfig+0xbc>
 8002840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002844:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	667b      	str	r3, [r7, #100]	@ 0x64
 800284e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002852:	663b      	str	r3, [r7, #96]	@ 0x60
 8002854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800285c:	4b62      	ldr	r3, [pc, #392]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002864:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800286e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d171      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0ea      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d137      	bne.n	8002908 <HAL_RCC_ClockConfig+0x164>
 8002898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800289c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80028b0:	d802      	bhi.n	80028b8 <HAL_RCC_ClockConfig+0x114>
 80028b2:	4b4d      	ldr	r3, [pc, #308]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_ClockConfig+0x134>
 80028b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80028cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d4:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f042 0220 	orr.w	r2, r2, #32
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f002 021f 	and.w	r2, r2, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d135      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0ae      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
 8002908:	2302      	movs	r3, #2
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b3f      	cmp	r3, #63	@ 0x3f
 800291e:	d802      	bhi.n	8002926 <HAL_RCC_ClockConfig+0x182>
 8002920:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	e00d      	b.n	8002942 <HAL_RCC_ClockConfig+0x19e>
 8002926:	2302      	movs	r3, #2
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
 8002932:	2302      	movs	r3, #2
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	2202      	movs	r2, #2
 8002944:	61ba      	str	r2, [r7, #24]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	fa92 f2a2 	rbit	r2, r2
 800294c:	617a      	str	r2, [r7, #20]
  return result;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f042 0220 	orr.w	r2, r2, #32
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 021f 	and.w	r2, r2, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002970:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	491a      	ldr	r1, [pc, #104]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002982:	f7fe f8dd 	bl	8000b40 <HAL_GetTick>
 8002986:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298a:	f7fe f8d9 	bl	8000b40 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e062      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 020c 	and.w	r2, r3, #12
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d1eb      	bne.n	800298a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d215      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 0207 	bic.w	r2, r3, #7
 80029c8:	4906      	ldr	r1, [pc, #24]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d006      	beq.n	80029ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e041      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
 80029e2:	bf00      	nop
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	491a      	ldr	r1, [pc, #104]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a16:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4912      	ldr	r1, [pc, #72]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a2a:	f000 f829 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a38:	22f0      	movs	r2, #240	@ 0xf0
 8002a3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	60fa      	str	r2, [r7, #12]
  return result;
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fab2 f282 	clz	r2, r2
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	40d3      	lsrs	r3, r2
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x2d0>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <HAL_RCC_ClockConfig+0x2d4>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_RCC_ClockConfig+0x2d8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe f82a 	bl	8000ab8 <HAL_InitTick>
  
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3778      	adds	r7, #120	@ 0x78
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08003804 	.word	0x08003804
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8002aae:	e026      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab2:	613b      	str	r3, [r7, #16]
      break;
 8002ab4:	e026      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002adc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e004      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
      break;
 8002afc:	e002      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b00:	613b      	str	r3, [r7, #16]
      break;
 8002b02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b04:	693b      	ldr	r3, [r7, #16]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	007a1200 	.word	0x007a1200
 8002b1c:	0800381c 	.word	0x0800381c
 8002b20:	0800382c 	.word	0x0800382c
 8002b24:	003d0900 	.word	0x003d0900

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b46:	f7ff ffef 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b54:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 8002b60:	603a      	str	r2, [r7, #0]
  return result;
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	40d3      	lsrs	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08003814 	.word	0x08003814

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b8a:	f7ff ffcd 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b98:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	fa92 f2a2 	rbit	r2, r2
 8002ba4:	603a      	str	r2, [r7, #0]
  return result;
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	40d3      	lsrs	r3, r2
 8002bb0:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08003814 	.word	0x08003814

08002bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b092      	sub	sp, #72	@ 0x48
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80d2 	beq.w	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bec:	4b4d      	ldr	r3, [pc, #308]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10e      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4a49      	ldr	r2, [pc, #292]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	61d3      	str	r3, [r2, #28]
 8002c04:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b44      	ldr	r3, [pc, #272]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a40      	ldr	r2, [pc, #256]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fd ff87 	bl	8000b40 <HAL_GetTick>
 8002c32:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fd ff83 	bl	8000b40 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	@ 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e12b      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b37      	ldr	r3, [pc, #220]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c54:	4b33      	ldr	r3, [pc, #204]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8082 	beq.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d07a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c74:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d049      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fd ff33 	bl	8000b40 <HAL_GetTick>
 8002cda:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fd ff2f 	bl	8000b40 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0d5      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d1e:	4b01      	ldr	r3, [pc, #4]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	e00d      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	10908100 	.word	0x10908100
 8002d30:	2302      	movs	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	2202      	movs	r2, #2
 8002d42:	613a      	str	r2, [r7, #16]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	fa92 f2a2 	rbit	r2, r2
 8002d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	fab2 f282 	clz	r2, r2
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f002 021f 	and.w	r2, r2, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0b9      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	494c      	ldr	r1, [pc, #304]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b48      	ldr	r3, [pc, #288]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a47      	ldr	r2, [pc, #284]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9c:	4b42      	ldr	r3, [pc, #264]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	f023 0203 	bic.w	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	493f      	ldr	r1, [pc, #252]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4938      	ldr	r1, [pc, #224]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd8:	4b33      	ldr	r3, [pc, #204]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4930      	ldr	r1, [pc, #192]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f023 0210 	bic.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4929      	ldr	r1, [pc, #164]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	4921      	ldr	r1, [pc, #132]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f023 0220 	bic.w	r2, r3, #32
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	491a      	ldr	r1, [pc, #104]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002e50:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4912      	ldr	r1, [pc, #72]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	490b      	ldr	r1, [pc, #44]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	4903      	ldr	r1, [pc, #12]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3748      	adds	r7, #72	@ 0x48
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000

08002eac <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e07f      	b.n	8002fbe <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	635a      	str	r2, [r3, #52]	@ 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fd fbb7 	bl	8000670 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002f10:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002f38:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <HAL_SDADC_Init+0x11c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d00f      	beq.n	8002f7c <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_SDADC_Init+0x11c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <HAL_SDADC_Init+0x11c>)
 8002f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f66:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8002f68:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <HAL_SDADC_Init+0x11c>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	4915      	ldr	r1, [pc, #84]	@ (8002fc8 <HAL_SDADC_Init+0x11c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8002f76:	2002      	movs	r0, #2
 8002f78:	f7fd fdee 	bl	8000b58 <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 8002f8c:	f7fd fdd8 	bl	8000b40 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8002f92:	e008      	b.n	8002fa6 <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002f94:	f7fd fdd4 	bl	8000b40 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002fa0:	d901      	bls.n	8002fa6 <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e00b      	b.n	8002fbe <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ef      	bne.n	8002f94 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40016000 	.word	0x40016000

08002fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e040      	b.n	8003060 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fca6 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	@ 0x24
 8002ff8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9a2 	bl	800335c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f825 	bl	8003068 <UART_SetConfig>
 800301e:	4603      	mov	r3, r0
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e01b      	b.n	8003060 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa21 	bl	80034a0 <UART_CheckIdleState>
 800305e:	4603      	mov	r3, r0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003096:	f023 030c 	bic.w	r3, r3, #12
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a99      	ldr	r2, [pc, #612]	@ (8003348 <UART_SetConfig+0x2e0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d120      	bne.n	800312a <UART_SetConfig+0xc2>
 80030e8:	4b98      	ldr	r3, [pc, #608]	@ (800334c <UART_SetConfig+0x2e4>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d817      	bhi.n	8003124 <UART_SetConfig+0xbc>
 80030f4:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <UART_SetConfig+0x94>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	08003119 	.word	0x08003119
 8003104:	0800311f 	.word	0x0800311f
 8003108:	08003113 	.word	0x08003113
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e061      	b.n	80031d6 <UART_SetConfig+0x16e>
 8003112:	2302      	movs	r3, #2
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e05e      	b.n	80031d6 <UART_SetConfig+0x16e>
 8003118:	2304      	movs	r3, #4
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e05b      	b.n	80031d6 <UART_SetConfig+0x16e>
 800311e:	2308      	movs	r3, #8
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e058      	b.n	80031d6 <UART_SetConfig+0x16e>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e055      	b.n	80031d6 <UART_SetConfig+0x16e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a88      	ldr	r2, [pc, #544]	@ (8003350 <UART_SetConfig+0x2e8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d124      	bne.n	800317e <UART_SetConfig+0x116>
 8003134:	4b85      	ldr	r3, [pc, #532]	@ (800334c <UART_SetConfig+0x2e4>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800313c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003140:	d011      	beq.n	8003166 <UART_SetConfig+0xfe>
 8003142:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003146:	d817      	bhi.n	8003178 <UART_SetConfig+0x110>
 8003148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800314c:	d011      	beq.n	8003172 <UART_SetConfig+0x10a>
 800314e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003152:	d811      	bhi.n	8003178 <UART_SetConfig+0x110>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <UART_SetConfig+0xf8>
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315c:	d006      	beq.n	800316c <UART_SetConfig+0x104>
 800315e:	e00b      	b.n	8003178 <UART_SetConfig+0x110>
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e037      	b.n	80031d6 <UART_SetConfig+0x16e>
 8003166:	2302      	movs	r3, #2
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e034      	b.n	80031d6 <UART_SetConfig+0x16e>
 800316c:	2304      	movs	r3, #4
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e031      	b.n	80031d6 <UART_SetConfig+0x16e>
 8003172:	2308      	movs	r3, #8
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e02e      	b.n	80031d6 <UART_SetConfig+0x16e>
 8003178:	2310      	movs	r3, #16
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e02b      	b.n	80031d6 <UART_SetConfig+0x16e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a74      	ldr	r2, [pc, #464]	@ (8003354 <UART_SetConfig+0x2ec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d124      	bne.n	80031d2 <UART_SetConfig+0x16a>
 8003188:	4b70      	ldr	r3, [pc, #448]	@ (800334c <UART_SetConfig+0x2e4>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003190:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003194:	d011      	beq.n	80031ba <UART_SetConfig+0x152>
 8003196:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800319a:	d817      	bhi.n	80031cc <UART_SetConfig+0x164>
 800319c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031a0:	d011      	beq.n	80031c6 <UART_SetConfig+0x15e>
 80031a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031a6:	d811      	bhi.n	80031cc <UART_SetConfig+0x164>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <UART_SetConfig+0x14c>
 80031ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031b0:	d006      	beq.n	80031c0 <UART_SetConfig+0x158>
 80031b2:	e00b      	b.n	80031cc <UART_SetConfig+0x164>
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e00d      	b.n	80031d6 <UART_SetConfig+0x16e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e00a      	b.n	80031d6 <UART_SetConfig+0x16e>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e007      	b.n	80031d6 <UART_SetConfig+0x16e>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e004      	b.n	80031d6 <UART_SetConfig+0x16e>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e001      	b.n	80031d6 <UART_SetConfig+0x16e>
 80031d2:	2310      	movs	r3, #16
 80031d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031de:	d15a      	bne.n	8003296 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 80031e0:	7ffb      	ldrb	r3, [r7, #31]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d827      	bhi.n	8003236 <UART_SetConfig+0x1ce>
 80031e6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <UART_SetConfig+0x184>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff fc96 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e013      	b.n	8003240 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff fcb4 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b4d      	ldr	r3, [pc, #308]	@ (8003358 <UART_SetConfig+0x2f0>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e00c      	b.n	8003240 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7ff fc2b 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 800322a:	61b8      	str	r0, [r7, #24]
        break;
 800322c:	e008      	b.n	8003240 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e004      	b.n	8003240 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77bb      	strb	r3, [r7, #30]
        break;
 800323e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d074      	beq.n	8003330 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	005a      	lsls	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d916      	bls.n	8003290 <UART_SetConfig+0x228>
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d212      	bcs.n	8003290 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f023 030f 	bic.w	r3, r3, #15
 8003272:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	b29b      	uxth	r3, r3
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	b29a      	uxth	r2, r3
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	4313      	orrs	r3, r2
 8003284:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	89fa      	ldrh	r2, [r7, #14]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	e04f      	b.n	8003330 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77bb      	strb	r3, [r7, #30]
 8003294:	e04c      	b.n	8003330 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003296:	7ffb      	ldrb	r3, [r7, #31]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d828      	bhi.n	80032ee <UART_SetConfig+0x286>
 800329c:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <UART_SetConfig+0x23c>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	080032d9 	.word	0x080032d9
 80032b0:	080032ef 	.word	0x080032ef
 80032b4:	080032df 	.word	0x080032df
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	080032ef 	.word	0x080032ef
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7ff fc3a 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80032cc:	61b8      	str	r0, [r7, #24]
        break;
 80032ce:	e013      	b.n	80032f8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d0:	f7ff fc58 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 80032d4:	61b8      	str	r0, [r7, #24]
        break;
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <UART_SetConfig+0x2f0>)
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e00c      	b.n	80032f8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7ff fbcf 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 80032e2:	61b8      	str	r0, [r7, #24]
        break;
 80032e4:	e008      	b.n	80032f8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e004      	b.n	80032f8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77bb      	strb	r3, [r7, #30]
        break;
 80032f6:	bf00      	nop
    }

    if (pclk != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085a      	lsrs	r2, r3, #1
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d909      	bls.n	800332c <UART_SetConfig+0x2c4>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800331e:	d205      	bcs.n	800332c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e001      	b.n	8003330 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800333c:	7fbb      	ldrb	r3, [r7, #30]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40013800 	.word	0x40013800
 800334c:	40021000 	.word	0x40021000
 8003350:	40004400 	.word	0x40004400
 8003354:	40004800 	.word	0x40004800
 8003358:	007a1200 	.word	0x007a1200

0800335c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345a:	d10a      	bne.n	8003472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b098      	sub	sp, #96	@ 0x60
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b0:	f7fd fb46 	bl	8000b40 <HAL_GetTick>
 80034b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d12e      	bne.n	8003522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f88c 	bl	80035f0 <UART_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d021      	beq.n	8003522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800350a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e6      	bne.n	80034de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e062      	b.n	80035e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d149      	bne.n	80035c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f856 	bl	80035f0 <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d03c      	beq.n	80035c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	623b      	str	r3, [r7, #32]
   return(result);
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800355e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003568:	633b      	str	r3, [r7, #48]	@ 0x30
 800356a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800356e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e6      	bne.n	800354a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3308      	adds	r3, #8
 8003582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	60fb      	str	r3, [r7, #12]
   return(result);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3308      	adds	r3, #8
 800359a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800359c:	61fa      	str	r2, [r7, #28]
 800359e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	617b      	str	r3, [r7, #20]
   return(result);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e5      	bne.n	800357c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e011      	b.n	80035e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3758      	adds	r7, #88	@ 0x58
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	e04f      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d04b      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fd fa99 	bl	8000b40 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <UART_WaitOnFlagUntilTimeout+0x30>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e04e      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d037      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b80      	cmp	r3, #128	@ 0x80
 8003636:	d034      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b40      	cmp	r3, #64	@ 0x40
 800363c:	d031      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d110      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2208      	movs	r2, #8
 8003652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f838 	bl	80036ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2208      	movs	r2, #8
 800365e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e029      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800367c:	d111      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f81e 	bl	80036ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00f      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d0a0      	beq.n	8003602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b095      	sub	sp, #84	@ 0x54
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e6      	bne.n	80036d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3308      	adds	r3, #8
 800370a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	61fb      	str	r3, [r7, #28]
   return(result);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3308      	adds	r3, #8
 8003722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373c:	2b01      	cmp	r3, #1
 800373e:	d118      	bne.n	8003772 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	60bb      	str	r3, [r7, #8]
   return(result);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f023 0310 	bic.w	r3, r3, #16
 8003754:	647b      	str	r3, [r7, #68]	@ 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6979      	ldr	r1, [r7, #20]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	613b      	str	r3, [r7, #16]
   return(result);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e6      	bne.n	8003740 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003786:	bf00      	nop
 8003788:	3754      	adds	r7, #84	@ 0x54
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <memset>:
 8003792:	4402      	add	r2, r0
 8003794:	4603      	mov	r3, r0
 8003796:	4293      	cmp	r3, r2
 8003798:	d100      	bne.n	800379c <memset+0xa>
 800379a:	4770      	bx	lr
 800379c:	f803 1b01 	strb.w	r1, [r3], #1
 80037a0:	e7f9      	b.n	8003796 <memset+0x4>
	...

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4d0d      	ldr	r5, [pc, #52]	@ (80037dc <__libc_init_array+0x38>)
 80037a8:	4c0d      	ldr	r4, [pc, #52]	@ (80037e0 <__libc_init_array+0x3c>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	2600      	movs	r6, #0
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	4d0b      	ldr	r5, [pc, #44]	@ (80037e4 <__libc_init_array+0x40>)
 80037b6:	4c0c      	ldr	r4, [pc, #48]	@ (80037e8 <__libc_init_array+0x44>)
 80037b8:	f000 f818 	bl	80037ec <_init>
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	2600      	movs	r6, #0
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	0800383c 	.word	0x0800383c
 80037e0:	0800383c 	.word	0x0800383c
 80037e4:	0800383c 	.word	0x0800383c
 80037e8:	08003840 	.word	0x08003840

080037ec <_init>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr

080037f8 <_fini>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr
